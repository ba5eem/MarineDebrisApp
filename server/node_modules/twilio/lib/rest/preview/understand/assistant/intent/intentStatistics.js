'use strict';

/* jshint ignore:start */
/**
 * This code was generated by
 * \ / _    _  _|   _  _
 *  | (_)\/(_)(_|\/| |(/_  v1.0.0
 *       /       /
 */
/* jshint ignore:end */

var Q = require('q');  /* jshint ignore:line */
var _ = require('lodash');  /* jshint ignore:line */
var Page = require('../../../../../base/Page');  /* jshint ignore:line */
var deserialize = require(
    '../../../../../base/deserialize');  /* jshint ignore:line */
var values = require('../../../../../base/values');  /* jshint ignore:line */

var IntentStatisticsList;
var IntentStatisticsPage;
var IntentStatisticsInstance;
var IntentStatisticsContext;

/* jshint ignore:start */
/**
 * @description Initialize the IntentStatisticsList
 * PLEASE NOTE that this class contains preview products that are subject to change. Use them with caution. If you currently do not have developer preview access, please contact help@twilio.com.
 *
 * @param {Twilio.Preview.Understand} version - Version of the resource
 * @param {string} assistantSid - The unique ID of the parent Assistant.
 * @param {string} intentSid -
 *          The unique ID of the Intent associated with this Field.
 */
/* jshint ignore:end */
IntentStatisticsList = function IntentStatisticsList(version, assistantSid,
                                                      intentSid) {
  /* jshint ignore:start */
  /**
   * @param {string} sid - sid of instance
   *
   * @returns {Twilio.Preview.Understand.AssistantContext.IntentContext.IntentStatisticsContext}
   */
  /* jshint ignore:end */
  function IntentStatisticsListInstance(sid) {
    return IntentStatisticsListInstance.get(sid);
  }

  IntentStatisticsListInstance._version = version;
  // Path Solution
  IntentStatisticsListInstance._solution = {assistantSid: assistantSid, intentSid: intentSid};
  /* jshint ignore:start */
  /**
   * Constructs a intent_statistics
   *
   * @returns {Twilio.Preview.Understand.AssistantContext.IntentContext.IntentStatisticsContext}
   */
  /* jshint ignore:end */
  IntentStatisticsListInstance.get = function get() {
    return new IntentStatisticsContext(
      this._version,
      this._solution.assistantSid,
      this._solution.intentSid
    );
  };

  return IntentStatisticsListInstance;
};


/* jshint ignore:start */
/**
 * Initialize the IntentStatisticsPagePLEASE NOTE that this class contains preview products that are subject to change. Use them with caution. If you currently do not have developer preview access, please contact help@twilio.com.
 *
 * @param {Understand} version - Version of the resource
 * @param {Response<string>} response - Response from the API
 * @param {IntentStatisticsSolution} solution - Path solution
 *
 * @returns IntentStatisticsPage
 */
/* jshint ignore:end */
IntentStatisticsPage = function IntentStatisticsPage(version, response,
                                                      solution) {
  // Path Solution
  this._solution = solution;

  Page.prototype.constructor.call(this, version, response, this._solution);
};

_.extend(IntentStatisticsPage.prototype, Page.prototype);
IntentStatisticsPage.prototype.constructor = IntentStatisticsPage;

/* jshint ignore:start */
/**
 * Build an instance of IntentStatisticsInstance
 *
 * @param {IntentStatisticsPayload} payload - Payload response from the API
 *
 * @returns IntentStatisticsInstance
 */
/* jshint ignore:end */
IntentStatisticsPage.prototype.getInstance = function getInstance(payload) {
  return new IntentStatisticsInstance(
    this._version,
    payload,
    this._solution.assistantSid,
    this._solution.intentSid
  );
};


/* jshint ignore:start */
/**
 * Initialize the IntentStatisticsContextPLEASE NOTE that this class contains preview products that are subject to change. Use them with caution. If you currently do not have developer preview access, please contact help@twilio.com.
 *
 * @property {string} accountSid -
 *          The unique ID of the Account that created this Field.
 * @property {string} assistantSid - The unique ID of the parent Assistant.
 * @property {string} intentSid -
 *          The unique ID of the Intent associated with this Field.
 * @property {number} samplesCount -
 *          The total number of Samples associated with this Intent.
 * @property {number} fieldsCount -
 *          The total number of Fields associated with this Intent.
 * @property {string} url - The url
 *
 * @param {Understand} version - Version of the resource
 * @param {IntentStatisticsPayload} payload - The instance payload
 * @param {sid} assistantSid - The unique ID of the parent Assistant.
 * @param {sid} intentSid - The unique ID of the Intent associated with this Field.
 */
/* jshint ignore:end */
IntentStatisticsInstance = function IntentStatisticsInstance(version, payload,
    assistantSid, intentSid) {
  this._version = version;

  // Marshaled Properties
  this.accountSid = payload.account_sid; // jshint ignore:line
  this.assistantSid = payload.assistant_sid; // jshint ignore:line
  this.intentSid = payload.intent_sid; // jshint ignore:line
  this.samplesCount = deserialize.integer(payload.samples_count); // jshint ignore:line
  this.fieldsCount = deserialize.integer(payload.fields_count); // jshint ignore:line
  this.url = payload.url; // jshint ignore:line

  // Context
  this._context = undefined;
  this._solution = {assistantSid: assistantSid, intentSid: intentSid, };
};

Object.defineProperty(IntentStatisticsInstance.prototype,
  '_proxy', {
  get: function() {
    if (!this._context) {
      this._context = new IntentStatisticsContext(
        this._version,
        this._solution.assistantSid,
        this._solution.intentSid
      );
    }

    return this._context;
  }
});

/* jshint ignore:start */
/**
 * fetch a IntentStatisticsInstance
 *
 * @param {function} [callback] - Callback to handle processed record
 *
 * @returns {Promise} Resolves to processed IntentStatisticsInstance
 */
/* jshint ignore:end */
IntentStatisticsInstance.prototype.fetch = function fetch(callback) {
  return this._proxy.fetch(callback);
};

/* jshint ignore:start */
/**
 * Produce a plain JSON object version of the IntentStatisticsInstance for serialization.
 * Removes any circular references in the object.
 *
 * @returns Object
 */
/* jshint ignore:end */
IntentStatisticsInstance.prototype.toJSON = function toJSON() {
  let clone = {};
  _.forOwn(this, function(value, key) {
    if (!_.startsWith(key, '_') && ! _.isFunction(value)) {
      clone[key] = value;
    }
  });
  return clone;
};


/* jshint ignore:start */
/**
 * Initialize the IntentStatisticsContextPLEASE NOTE that this class contains preview products that are subject to change. Use them with caution. If you currently do not have developer preview access, please contact help@twilio.com.
 *
 * @param {Understand} version - Version of the resource
 * @param {sid_like} assistantSid - The assistant_sid
 * @param {sid_like} intentSid - The intent_sid
 */
/* jshint ignore:end */
IntentStatisticsContext = function IntentStatisticsContext(version,
                                                            assistantSid,
                                                            intentSid) {
  this._version = version;

  // Path Solution
  this._solution = {assistantSid: assistantSid, intentSid: intentSid, };
  this._uri = _.template(
    '/Assistants/<%= assistantSid %>/Intents/<%= intentSid %>/Statistics' // jshint ignore:line
  )(this._solution);
};

/* jshint ignore:start */
/**
 * fetch a IntentStatisticsInstance
 *
 * @param {function} [callback] - Callback to handle processed record
 *
 * @returns {Promise} Resolves to processed IntentStatisticsInstance
 */
/* jshint ignore:end */
IntentStatisticsContext.prototype.fetch = function fetch(callback) {
  var deferred = Q.defer();
  var promise = this._version.fetch({uri: this._uri, method: 'GET'});

  promise = promise.then(function(payload) {
    deferred.resolve(new IntentStatisticsInstance(
      this._version,
      payload,
      this._solution.assistantSid,
      this._solution.intentSid
    ));
  }.bind(this));

  promise.catch(function(error) {
    deferred.reject(error);
  });

  if (_.isFunction(callback)) {
    deferred.promise.nodeify(callback);
  }

  return deferred.promise;
};

module.exports = {
  IntentStatisticsList: IntentStatisticsList,
  IntentStatisticsPage: IntentStatisticsPage,
  IntentStatisticsInstance: IntentStatisticsInstance,
  IntentStatisticsContext: IntentStatisticsContext
};
