'use strict';

/* jshint ignore:start */
/**
 * This code was generated by
 * \ / _    _  _|   _  _
 *  | (_)\/(_)(_|\/| |(/_  v1.0.0
 *       /       /
 */
/* jshint ignore:end */

var Q = require('q');  /* jshint ignore:line */
var _ = require('lodash');  /* jshint ignore:line */
var Page = require('../../../../../base/Page');  /* jshint ignore:line */
var serialize = require(
    '../../../../../base/serialize');  /* jshint ignore:line */
var values = require('../../../../../base/values');  /* jshint ignore:line */

var IntentActionsList;
var IntentActionsPage;
var IntentActionsInstance;
var IntentActionsContext;

/* jshint ignore:start */
/**
 * @description Initialize the IntentActionsList
 * PLEASE NOTE that this class contains preview products that are subject to change. Use them with caution. If you currently do not have developer preview access, please contact help@twilio.com.
 *
 * @param {Twilio.Preview.Understand} version - Version of the resource
 * @param {string} assistantSid - The unique ID of the parent Assistant.
 * @param {string} intentSid - The unique ID of the Intent.
 */
/* jshint ignore:end */
IntentActionsList = function IntentActionsList(version, assistantSid, intentSid)
                                                {
  /* jshint ignore:start */
  /**
   * @param {string} sid - sid of instance
   *
   * @returns {Twilio.Preview.Understand.AssistantContext.IntentContext.IntentActionsContext}
   */
  /* jshint ignore:end */
  function IntentActionsListInstance(sid) {
    return IntentActionsListInstance.get(sid);
  }

  IntentActionsListInstance._version = version;
  // Path Solution
  IntentActionsListInstance._solution = {assistantSid: assistantSid, intentSid: intentSid};
  /* jshint ignore:start */
  /**
   * Constructs a intent_actions
   *
   * @returns {Twilio.Preview.Understand.AssistantContext.IntentContext.IntentActionsContext}
   */
  /* jshint ignore:end */
  IntentActionsListInstance.get = function get() {
    return new IntentActionsContext(
      this._version,
      this._solution.assistantSid,
      this._solution.intentSid
    );
  };

  return IntentActionsListInstance;
};


/* jshint ignore:start */
/**
 * Initialize the IntentActionsPagePLEASE NOTE that this class contains preview products that are subject to change. Use them with caution. If you currently do not have developer preview access, please contact help@twilio.com.
 *
 * @param {Understand} version - Version of the resource
 * @param {Response<string>} response - Response from the API
 * @param {IntentActionsSolution} solution - Path solution
 *
 * @returns IntentActionsPage
 */
/* jshint ignore:end */
IntentActionsPage = function IntentActionsPage(version, response, solution) {
  // Path Solution
  this._solution = solution;

  Page.prototype.constructor.call(this, version, response, this._solution);
};

_.extend(IntentActionsPage.prototype, Page.prototype);
IntentActionsPage.prototype.constructor = IntentActionsPage;

/* jshint ignore:start */
/**
 * Build an instance of IntentActionsInstance
 *
 * @param {IntentActionsPayload} payload - Payload response from the API
 *
 * @returns IntentActionsInstance
 */
/* jshint ignore:end */
IntentActionsPage.prototype.getInstance = function getInstance(payload) {
  return new IntentActionsInstance(
    this._version,
    payload,
    this._solution.assistantSid,
    this._solution.intentSid
  );
};


/* jshint ignore:start */
/**
 * Initialize the IntentActionsContextPLEASE NOTE that this class contains preview products that are subject to change. Use them with caution. If you currently do not have developer preview access, please contact help@twilio.com.
 *
 * @property {string} accountSid -
 *          The unique ID of the Account that created this Field.
 * @property {string} assistantSid - The unique ID of the parent Assistant.
 * @property {string} intentSid - The unique ID of the Intent.
 * @property {string} url - The url
 * @property {string} data - The data
 *
 * @param {Understand} version - Version of the resource
 * @param {IntentActionsPayload} payload - The instance payload
 * @param {sid} assistantSid - The unique ID of the parent Assistant.
 * @param {sid} intentSid - The unique ID of the Intent.
 */
/* jshint ignore:end */
IntentActionsInstance = function IntentActionsInstance(version, payload,
                                                        assistantSid, intentSid)
                                                        {
  this._version = version;

  // Marshaled Properties
  this.accountSid = payload.account_sid; // jshint ignore:line
  this.assistantSid = payload.assistant_sid; // jshint ignore:line
  this.intentSid = payload.intent_sid; // jshint ignore:line
  this.url = payload.url; // jshint ignore:line
  this.data = payload.data; // jshint ignore:line

  // Context
  this._context = undefined;
  this._solution = {assistantSid: assistantSid, intentSid: intentSid, };
};

Object.defineProperty(IntentActionsInstance.prototype,
  '_proxy', {
  get: function() {
    if (!this._context) {
      this._context = new IntentActionsContext(
        this._version,
        this._solution.assistantSid,
        this._solution.intentSid
      );
    }

    return this._context;
  }
});

/* jshint ignore:start */
/**
 * fetch a IntentActionsInstance
 *
 * @param {function} [callback] - Callback to handle processed record
 *
 * @returns {Promise} Resolves to processed IntentActionsInstance
 */
/* jshint ignore:end */
IntentActionsInstance.prototype.fetch = function fetch(callback) {
  return this._proxy.fetch(callback);
};

/* jshint ignore:start */
/**
 * update a IntentActionsInstance
 *
 * @param {object} [opts] - Options for request
 * @param {string} [opts.actions] -
 *          The JSON actions that instruct the Assistant how to perform this task.
 * @param {function} [callback] - Callback to handle processed record
 *
 * @returns {Promise} Resolves to processed IntentActionsInstance
 */
/* jshint ignore:end */
IntentActionsInstance.prototype.update = function update(opts, callback) {
  return this._proxy.update(opts, callback);
};

/* jshint ignore:start */
/**
 * Produce a plain JSON object version of the IntentActionsInstance for serialization.
 * Removes any circular references in the object.
 *
 * @returns Object
 */
/* jshint ignore:end */
IntentActionsInstance.prototype.toJSON = function toJSON() {
  let clone = {};
  _.forOwn(this, function(value, key) {
    if (!_.startsWith(key, '_') && ! _.isFunction(value)) {
      clone[key] = value;
    }
  });
  return clone;
};


/* jshint ignore:start */
/**
 * Initialize the IntentActionsContextPLEASE NOTE that this class contains preview products that are subject to change. Use them with caution. If you currently do not have developer preview access, please contact help@twilio.com.
 *
 * @param {Understand} version - Version of the resource
 * @param {sid_like} assistantSid - The unique ID of the parent Assistant.
 * @param {sid_like} intentSid - The unique ID of the Intent.
 */
/* jshint ignore:end */
IntentActionsContext = function IntentActionsContext(version, assistantSid,
                                                      intentSid) {
  this._version = version;

  // Path Solution
  this._solution = {assistantSid: assistantSid, intentSid: intentSid, };
  this._uri = _.template(
    '/Assistants/<%= assistantSid %>/Intents/<%= intentSid %>/Actions' // jshint ignore:line
  )(this._solution);
};

/* jshint ignore:start */
/**
 * fetch a IntentActionsInstance
 *
 * @param {function} [callback] - Callback to handle processed record
 *
 * @returns {Promise} Resolves to processed IntentActionsInstance
 */
/* jshint ignore:end */
IntentActionsContext.prototype.fetch = function fetch(callback) {
  var deferred = Q.defer();
  var promise = this._version.fetch({uri: this._uri, method: 'GET'});

  promise = promise.then(function(payload) {
    deferred.resolve(new IntentActionsInstance(
      this._version,
      payload,
      this._solution.assistantSid,
      this._solution.intentSid
    ));
  }.bind(this));

  promise.catch(function(error) {
    deferred.reject(error);
  });

  if (_.isFunction(callback)) {
    deferred.promise.nodeify(callback);
  }

  return deferred.promise;
};

/* jshint ignore:start */
/**
 * update a IntentActionsInstance
 *
 * @param {object} [opts] - Options for request
 * @param {string} [opts.actions] -
 *          The JSON actions that instruct the Assistant how to perform this task.
 * @param {function} [callback] - Callback to handle processed record
 *
 * @returns {Promise} Resolves to processed IntentActionsInstance
 */
/* jshint ignore:end */
IntentActionsContext.prototype.update = function update(opts, callback) {
  if (_.isFunction(opts)) {
    callback = opts;
    opts = {};
  }
  opts = opts || {};

  var deferred = Q.defer();
  var data = values.of({'Actions': serialize.object(_.get(opts, 'actions'))});

  var promise = this._version.update({uri: this._uri, method: 'POST', data: data});

  promise = promise.then(function(payload) {
    deferred.resolve(new IntentActionsInstance(
      this._version,
      payload,
      this._solution.assistantSid,
      this._solution.intentSid
    ));
  }.bind(this));

  promise.catch(function(error) {
    deferred.reject(error);
  });

  if (_.isFunction(callback)) {
    deferred.promise.nodeify(callback);
  }

  return deferred.promise;
};

module.exports = {
  IntentActionsList: IntentActionsList,
  IntentActionsPage: IntentActionsPage,
  IntentActionsInstance: IntentActionsInstance,
  IntentActionsContext: IntentActionsContext
};
