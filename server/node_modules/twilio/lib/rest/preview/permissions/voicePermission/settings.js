'use strict';

/* jshint ignore:start */
/**
 * This code was generated by
 * \ / _    _  _|   _  _
 *  | (_)\/(_)(_|\/| |(/_  v1.0.0
 *       /       /
 */
/* jshint ignore:end */

var Q = require('q');  /* jshint ignore:line */
var _ = require('lodash');  /* jshint ignore:line */
var Page = require('../../../../base/Page');  /* jshint ignore:line */
var serialize = require('../../../../base/serialize');  /* jshint ignore:line */
var values = require('../../../../base/values');  /* jshint ignore:line */

var SettingsList;
var SettingsPage;
var SettingsInstance;
var SettingsContext;

/* jshint ignore:start */
/**
 * @description Initialize the SettingsList
 * PLEASE NOTE that this class contains preview products that are subject to change. Use them with caution. If you currently do not have developer preview access, please contact help@twilio.com.
 *
 * @param {Twilio.Preview.Permissions} version - Version of the resource
 */
/* jshint ignore:end */
SettingsList = function SettingsList(version) {
  /* jshint ignore:start */
  /**
   * @param {string} sid - sid of instance
   *
   * @returns {Twilio.Preview.Permissions.VoicePermissionContext.SettingsContext}
   */
  /* jshint ignore:end */
  function SettingsListInstance(sid) {
    return SettingsListInstance.get(sid);
  }

  SettingsListInstance._version = version;
  // Path Solution
  SettingsListInstance._solution = {};
  /* jshint ignore:start */
  /**
   * Constructs a settings
   *
   * @returns {Twilio.Preview.Permissions.VoicePermissionContext.SettingsContext}
   */
  /* jshint ignore:end */
  SettingsListInstance.get = function get() {
    return new SettingsContext(this._version);
  };

  return SettingsListInstance;
};


/* jshint ignore:start */
/**
 * Initialize the SettingsPagePLEASE NOTE that this class contains preview products that are subject to change. Use them with caution. If you currently do not have developer preview access, please contact help@twilio.com.
 *
 * @param {Permissions} version - Version of the resource
 * @param {Response<string>} response - Response from the API
 * @param {SettingsSolution} solution - Path solution
 *
 * @returns SettingsPage
 */
/* jshint ignore:end */
SettingsPage = function SettingsPage(version, response, solution) {
  // Path Solution
  this._solution = solution;

  Page.prototype.constructor.call(this, version, response, this._solution);
};

_.extend(SettingsPage.prototype, Page.prototype);
SettingsPage.prototype.constructor = SettingsPage;

/* jshint ignore:start */
/**
 * Build an instance of SettingsInstance
 *
 * @param {SettingsPayload} payload - Payload response from the API
 *
 * @returns SettingsInstance
 */
/* jshint ignore:end */
SettingsPage.prototype.getInstance = function getInstance(payload) {
  return new SettingsInstance(this._version, payload);
};


/* jshint ignore:start */
/**
 * Initialize the SettingsContextPLEASE NOTE that this class contains preview products that are subject to change. Use them with caution. If you currently do not have developer preview access, please contact help@twilio.com.
 *
 * @property {boolean} inheritance -
 *          The status of  inheritance of outbound voice permissions and blocklist
 * @property {string} url - The url
 *
 * @param {Permissions} version - Version of the resource
 * @param {SettingsPayload} payload - The instance payload
 */
/* jshint ignore:end */
SettingsInstance = function SettingsInstance(version, payload) {
  this._version = version;

  // Marshaled Properties
  this.inheritance = payload.inheritance; // jshint ignore:line
  this.url = payload.url; // jshint ignore:line

  // Context
  this._context = undefined;
  this._solution = {};
};

Object.defineProperty(SettingsInstance.prototype,
  '_proxy', {
  get: function() {
    if (!this._context) {
      this._context = new SettingsContext(this._version);
    }

    return this._context;
  }
});

/* jshint ignore:start */
/**
 * fetch a SettingsInstance
 *
 * @param {function} [callback] - Callback to handle processed record
 *
 * @returns {Promise} Resolves to processed SettingsInstance
 */
/* jshint ignore:end */
SettingsInstance.prototype.fetch = function fetch(callback) {
  return this._proxy.fetch(callback);
};

/* jshint ignore:start */
/**
 * update a SettingsInstance
 *
 * @param {object} [opts] - Options for request
 * @param {boolean} [opts.inheritance] -
 *          Set true to enable inheritance voice permissions settings, false to disable
 * @param {function} [callback] - Callback to handle processed record
 *
 * @returns {Promise} Resolves to processed SettingsInstance
 */
/* jshint ignore:end */
SettingsInstance.prototype.update = function update(opts, callback) {
  return this._proxy.update(opts, callback);
};

/* jshint ignore:start */
/**
 * Produce a plain JSON object version of the SettingsInstance for serialization.
 * Removes any circular references in the object.
 *
 * @returns Object
 */
/* jshint ignore:end */
SettingsInstance.prototype.toJSON = function toJSON() {
  let clone = {};
  _.forOwn(this, function(value, key) {
    if (!_.startsWith(key, '_') && ! _.isFunction(value)) {
      clone[key] = value;
    }
  });
  return clone;
};


/* jshint ignore:start */
/**
 * Initialize the SettingsContextPLEASE NOTE that this class contains preview products that are subject to change. Use them with caution. If you currently do not have developer preview access, please contact help@twilio.com.
 *
 * @param {Permissions} version - Version of the resource
 */
/* jshint ignore:end */
SettingsContext = function SettingsContext(version) {
  this._version = version;

  // Path Solution
  this._solution = {};
  this._uri = _.template(
    '/VoicePermissions/Settings' // jshint ignore:line
  )(this._solution);
};

/* jshint ignore:start */
/**
 * fetch a SettingsInstance
 *
 * @param {function} [callback] - Callback to handle processed record
 *
 * @returns {Promise} Resolves to processed SettingsInstance
 */
/* jshint ignore:end */
SettingsContext.prototype.fetch = function fetch(callback) {
  var deferred = Q.defer();
  var promise = this._version.fetch({uri: this._uri, method: 'GET'});

  promise = promise.then(function(payload) {
    deferred.resolve(new SettingsInstance(this._version, payload));
  }.bind(this));

  promise.catch(function(error) {
    deferred.reject(error);
  });

  if (_.isFunction(callback)) {
    deferred.promise.nodeify(callback);
  }

  return deferred.promise;
};

/* jshint ignore:start */
/**
 * update a SettingsInstance
 *
 * @param {object} [opts] - Options for request
 * @param {boolean} [opts.inheritance] -
 *          Set true to enable inheritance voice permissions settings, false to disable
 * @param {function} [callback] - Callback to handle processed record
 *
 * @returns {Promise} Resolves to processed SettingsInstance
 */
/* jshint ignore:end */
SettingsContext.prototype.update = function update(opts, callback) {
  if (_.isFunction(opts)) {
    callback = opts;
    opts = {};
  }
  opts = opts || {};

  var deferred = Q.defer();
  var data = values.of({'Inheritance': serialize.bool(_.get(opts, 'inheritance'))});

  var promise = this._version.update({uri: this._uri, method: 'POST', data: data});

  promise = promise.then(function(payload) {
    deferred.resolve(new SettingsInstance(this._version, payload));
  }.bind(this));

  promise.catch(function(error) {
    deferred.reject(error);
  });

  if (_.isFunction(callback)) {
    deferred.promise.nodeify(callback);
  }

  return deferred.promise;
};

module.exports = {
  SettingsList: SettingsList,
  SettingsPage: SettingsPage,
  SettingsInstance: SettingsInstance,
  SettingsContext: SettingsContext
};
