/**
 * This code was generated by
 * \ / _    _  _|   _  _
 *  | (_)\/(_)(_|\/| |(/_  v1.0.0
 *       /       /
 */

import Page = require('../../../../base/Page');
import Permissions = require('../../Permissions');
import Response = require('../../../../http/response');
import serialize = require('../../../../base/serialize');
import { HighriskSpecialPrefixList } from './country/highriskSpecialPrefix';
import { HighriskSpecialPrefixListInstance } from './country/highriskSpecialPrefix';
import { SerializableClass } from '../../../../interfaces';

/**
 * @description Initialize the CountryList
 * PLEASE NOTE that this class contains preview products that are subject to change. Use them with caution. If you currently do not have developer preview access, please contact help@twilio.com.
 *
 * @param version - Version of the resource
 */
declare function CountryList(version: Permissions): CountryListInstance;

interface CountryListInstance {
  /**
   * @param sid - sid of instance
   */
  (sid: string): CountryContext;
  /**
   * Streams CountryInstance records from the API.
   *
   * This operation lazily loads records as efficiently as possible until the limit
   * is reached.
   *
   * The results are passed into the callback function, so this operation is memory efficient.
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param opts - Options for request
   * @param callback - Function to process each record
   */
  each(opts?: CountryListInstanceEachOptions, callback?: (item: CountryInstance, done: (err?: Error) => void) => void): void;
  /**
   * Constructs a country
   *
   * @param isoCode - The ISO country code
   */
  get(isoCode: string): CountryContext;
  /**
   * Retrieve a single target page of CountryInstance records from the API.
   * Request is executed immediately
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param targetUrl - API-generated URL for the requested results page
   * @param callback - Callback to handle list of records
   */
  getPage(targetUrl?: string, callback?: (error: Error | null, items: CountryPage) => any): Promise<CountryPage>;
  /**
   * Lists CountryInstance records from the API as a list.
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param opts - Options for request
   * @param callback - Callback to handle list of records
   */
  list(opts?: CountryListInstanceOptions, callback?: (error: Error | null, items: CountryInstance[]) => any): Promise<CountryInstance[]>;
  /**
   * Retrieve a single page of CountryInstance records from the API.
   * Request is executed immediately
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param opts - Options for request
   * @param callback - Callback to handle list of records
   */
  page(opts?: CountryListInstancePageOptions, callback?: (error: Error | null, items: CountryPage) => any): Promise<CountryPage>;
}

/**
 * Options to pass to each
 *
 * @property callback -
 *                         Function to process each record. If this and a positional
 *                         callback are passed, this one will be used
 * @property continent - Filter the results by specified continent
 * @property countryCode - country codes
 * @property done - Function to be called upon completion of streaming
 * @property highRiskSpecialNumbersEnabled - Filter the results by specified the status of high risk special
 * @property highRiskTollfraudNumbersEnabled - Filter the results by specified the status of high risk tollfraud special
 * @property isoCode - The ISO country code
 * @property limit -
 *                         Upper limit for the number of records to return.
 *                         each() guarantees never to return more than limit.
 *                         Default is no limit
 * @property lowRiskNumbersEnabled - Filter the results by specified  low risk special status
 * @property pageSize -
 *                         Number of records to fetch per request,
 *                         when not set will use the default value of 50 records.
 *                         If no pageSize is defined but a limit is defined,
 *                         each() will attempt to read the limit with the most efficient
 *                         page size, i.e. min(limit, 1000)
 */
interface CountryListInstanceEachOptions {
  callback?: (item: CountryInstance, done: (err?: Error) => void) => void;
  continent?: string;
  countryCode?: string;
  done?: Function;
  highRiskSpecialNumbersEnabled?: boolean;
  highRiskTollfraudNumbersEnabled?: boolean;
  isoCode?: string;
  limit?: number;
  lowRiskNumbersEnabled?: boolean;
  pageSize?: number;
}

/**
 * Options to pass to list
 *
 * @property continent - Filter the results by specified continent
 * @property countryCode - country codes
 * @property highRiskSpecialNumbersEnabled - Filter the results by specified the status of high risk special
 * @property highRiskTollfraudNumbersEnabled - Filter the results by specified the status of high risk tollfraud special
 * @property isoCode - The ISO country code
 * @property limit -
 *                         Upper limit for the number of records to return.
 *                         list() guarantees never to return more than limit.
 *                         Default is no limit
 * @property lowRiskNumbersEnabled - Filter the results by specified  low risk special status
 * @property pageSize -
 *                         Number of records to fetch per request,
 *                         when not set will use the default value of 50 records.
 *                         If no page_size is defined but a limit is defined,
 *                         list() will attempt to read the limit with the most
 *                         efficient page size, i.e. min(limit, 1000)
 */
interface CountryListInstanceOptions {
  continent?: string;
  countryCode?: string;
  highRiskSpecialNumbersEnabled?: boolean;
  highRiskTollfraudNumbersEnabled?: boolean;
  isoCode?: string;
  limit?: number;
  lowRiskNumbersEnabled?: boolean;
  pageSize?: number;
}

/**
 * Options to pass to page
 *
 * @property continent - Filter the results by specified continent
 * @property countryCode - country codes
 * @property highRiskSpecialNumbersEnabled - Filter the results by specified the status of high risk special
 * @property highRiskTollfraudNumbersEnabled - Filter the results by specified the status of high risk tollfraud special
 * @property isoCode - The ISO country code
 * @property lowRiskNumbersEnabled - Filter the results by specified  low risk special status
 * @property pageNumber - Page Number, this value is simply for client state
 * @property pageSize - Number of records to return, defaults to 50
 * @property pageToken - PageToken provided by the API
 */
interface CountryListInstancePageOptions {
  continent?: string;
  countryCode?: string;
  highRiskSpecialNumbersEnabled?: boolean;
  highRiskTollfraudNumbersEnabled?: boolean;
  isoCode?: string;
  lowRiskNumbersEnabled?: boolean;
  pageNumber?: number;
  pageSize?: number;
  pageToken?: string;
}

interface CountryPayload extends CountryResource, Page.TwilioResponsePayload {
}

interface CountryResource {
  continent: string;
  country_codes: string;
  high_risk_special_numbers_enabled: boolean;
  high_risk_tollfraud_numbers_enabled: boolean;
  iso_code: string;
  links: string;
  low_risk_numbers_enabled: boolean;
  name: string;
  url: string;
}

interface CountrySolution {
}


declare class CountryContext {
  /**
   * Initialize the CountryContextPLEASE NOTE that this class contains preview products that are subject to change. Use them with caution. If you currently do not have developer preview access, please contact help@twilio.com.
   *
   * @property highriskSpecialPrefixes - highriskSpecialPrefixes resource
   *
   * @param version - Version of the resource
   * @param isoCode - The ISO country code
   */
  constructor(version: Permissions, isoCode: string);

  /**
   * fetch a CountryInstance
   *
   * @param callback - Callback to handle processed record
   */
  fetch(callback?: (error: Error | null, items: CountryInstance) => any): Promise<CountryInstance>;
  highriskSpecialPrefixes: HighriskSpecialPrefixListInstance;
}


declare class CountryInstance extends SerializableClass {
  /**
   * Initialize the CountryContextPLEASE NOTE that this class contains preview products that are subject to change. Use them with caution. If you currently do not have developer preview access, please contact help@twilio.com.
   *
   * @property isoCode - The ISO country code
   * @property name - Name of the country
   * @property continent - Name of the continent
   * @property countryCodes - The list of country codes
   * @property lowRiskNumbersEnabled - True, if low risk numbers are enabled, else false
   * @property highRiskSpecialNumbersEnabled - True, if high risk special numbers are enabled, else false
   * @property highRiskTollfraudNumbersEnabled - True, if high risk tollfraud numbers are enabled, else false
   * @property url - The URL for this resource.
   * @property links - The links
   *
   * @param version - Version of the resource
   * @param payload - The instance payload
   * @param isoCode - The ISO country code
   */
  constructor(version: Permissions, payload: CountryPayload, isoCode: string);

  private _proxy: CountryContext;
  continent: string;
  countryCodes: string;
  /**
   * fetch a CountryInstance
   *
   * @param callback - Callback to handle processed record
   */
  fetch(callback?: (error: Error | null, items: CountryInstance) => any): void;
  highRiskSpecialNumbersEnabled: boolean;
  highRiskTollfraudNumbersEnabled: boolean;
  /**
   * Access the highriskSpecialPrefixes
   */
  highriskSpecialPrefixes(): HighriskSpecialPrefixListInstance;
  isoCode: string;
  links: string;
  lowRiskNumbersEnabled: boolean;
  name: string;
  /**
   * Produce a plain JSON object version of the CountryInstance for serialization.
   * Removes any circular references in the object.
   */
  toJSON(): any;
  url: string;
}


declare class CountryPage extends Page<Permissions, CountryPayload, CountryResource, CountryInstance> {
  /**
   * Initialize the CountryPagePLEASE NOTE that this class contains preview products that are subject to change. Use them with caution. If you currently do not have developer preview access, please contact help@twilio.com.
   *
   * @param version - Version of the resource
   * @param response - Response from the API
   * @param solution - Path solution
   */
  constructor(version: Permissions, response: Response<string>, solution: CountrySolution);

  /**
   * Build an instance of CountryInstance
   *
   * @param payload - Payload response from the API
   */
  getInstance(payload: CountryPayload): CountryInstance;
}

export { CountryContext, CountryInstance, CountryList, CountryListInstance, CountryListInstanceEachOptions, CountryListInstanceOptions, CountryListInstancePageOptions, CountryPage, CountryPayload, CountryResource, CountrySolution }
